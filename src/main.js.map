{"mappings":"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","sources":["src/server/app.js","src/etc/helpers.js","src/managers/roomManager.js","src/managers/databaseManager.js","src/server/webs.js","src/server/events.js","src/objects/snake.js","src/objects/room.js","src/server/eventListener.js","src/bots/bots.js","src/managers/internals.js","src/managers/gameManager.js","src/index.js","src/server/internals.js"],"sourcesContent":["const express = require('express');\r\nconst { json2array, generateAPIKey, rand, guid } = require(\"../etc/helpers.js\");\r\nconst { manager } = require(\"../managers/roomManager.js\");\r\nconst { resolve } = require(\"path\");\r\nconst http = require('http');\r\nconst axios = require('axios');\r\nconst nunjucks = require(\"nunjucks\");\r\nconst session = require('express-session');\r\nconst morgan = require(\"morgan\");\r\nconst { apiKeyManager, dbManager } = require(\"../managers/databaseManager.js\");\r\nconst IP = require('ip');\r\nvar Filter = require('bad-words'),\r\n    filter = new Filter();\r\n\r\n\r\nconst app = express();\r\n\r\n\r\nconst server = http.createServer(app);\r\n\r\n\r\n\r\napp.use(express.json());\r\napp.use(express.static(resolve(\"./src/server/public\")));\r\nnunjucks.configure(resolve(\"./src/server/views\"), {\r\n    autoescape: true,\r\n    express: app\r\n});\r\n// app.use(express.static(resolve(\"./MultiSnake-V2/src/server/public\")));\r\n// nunjucks.configure(resolve(\"./MultiSnake-V2/src/server/views\"), {\r\n//     autoescape: true,\r\n//     express: app\r\n// });\r\napp.use(\r\n    session({\r\n        secret: process.env.KEY,\r\n        resave: false,\r\n        saveUninitialized: true\r\n    })\r\n);\r\n\r\napp.use(restrict([\"/account\"], \"/login\", true));\r\napp.use(restrict([\"/login\", \"/signup\"], \"/account\", false))\r\nfunction restrict(urls, redirect, loggedInToAccess) {\r\n    return (req, res, next) => {\r\n        var path = req._parsedUrl.pathname;\r\n        path = path.split(\"/\").join(\"\");\r\n        urls = urls.map(u => {\r\n            return u.split(\"/\").join(\"\");\r\n        })\r\n        var restricted = (urls.indexOf(path) !== -1);\r\n        if (restricted && loggedInToAccess) {\r\n            if (req.session.user) {\r\n                next()\r\n            } else {\r\n                res.redirect(redirect);\r\n            }\r\n        } else if (restricted && !loggedInToAccess) {\r\n            if (!req.session.user) {\r\n                next();\r\n            } else {\r\n                res.redirect(redirect)\r\n            }\r\n        } else {\r\n            next();\r\n        }\r\n    }\r\n}\r\n\r\nfunction mustBeLoggedIn(message) { \r\n    // equivalent of restrict() but for API endpoints\r\n    return (req,res,next)=>{\r\n        if(req.session.user && req.session.user.email){\r\n            next();\r\n        }else{\r\n            res.status(405).json({\r\n                message,\r\n                color: \"red\",\r\n                redirect: \"/login\"\r\n            })\r\n        }\r\n    }\r\n}\r\nfunction updateSession(log) {\r\n    return async (req, res, next) => {\r\n        if (req.session && req.session.user) {\r\n            var nuser = await dbManager.getUser(req.session.user.uid);\r\n            if (nuser) {\r\n                delete nuser.passwordHash;\r\n                req.session.user = nuser;\r\n            } else {\r\n                req.session.user = false;\r\n            }\r\n        }\r\n        next();\r\n    }\r\n}\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"index.njk\",{\r\n        user:req.session.user\r\n    });\r\n});\r\n// GET method to render the login page\r\napp.get('/login', (req, res) => {\r\n    res.render('login.njk');\r\n});\r\napp.get(\"/developers\",updateSession(), (req, res) => {\r\n    res.render(\"developers.njk\", {\r\n        user: req.session.user,\r\n    });\r\n});\r\n// GET method to render the account page\r\napp.get('/account', updateSession(), (req, res) => {\r\n    res.render('account.njk', { user: req.session.user });\r\n});\r\napp.get(\"/account/:uid\", async (req, res, next) => {\r\n    var user = await dbManager.getUser(req.params.uid);\r\n    if (user) {\r\n        res.render(\"account_view.njk\", {\r\n            user: req.session.user,\r\n            viewing: user\r\n        });\r\n    } else {\r\n        next();\r\n    }\r\n})\r\napp.get(\"/signup\", (req, res) => {\r\n    res.render(\"signup.njk\");\r\n});\r\napp.get(\"/play/:room\", (req, res) => {\r\n    res.render(\"play.njk\", {\r\n        room: req.params.room,\r\n        type: req.query.type || \"standard\",\r\n        user: req.session.user\r\n    });\r\n});\r\n\r\napp.get(\"/verifyEmail\", async (req, res) => {\r\n    if(req.session.user && req.session.user.email){\r\n        req.session.verificationCode = rand(6);\r\n        await dbManager.sendVerification(req.session.user.email, req.session.verificationCode);\r\n        res.render(\"verify.njk\", {\r\n            user: req.session.user\r\n        });\r\n    }else{\r\n        res.redirect(\"/signup\")\r\n    }\r\n});\r\n// Logout endpoint\r\napp.get('/logout', (req, res) => {\r\n    // Destroy the session\r\n    req.session.destroy();\r\n    res.redirect(\"/login\")\r\n\r\n});\r\n\r\napp.delete(\"/deleteKey\",mustBeLoggedIn(\"You must be logged in to delete an API key\"),async (req,res)=>{\r\n    const { uid, api_key } = req.body;\r\n    await dbManager.removeAPIKey(uid,api_key);\r\n    res.status(200).json({\r\n        message:`${api_key} successfully deleted`,\r\n        color: \"green\"\r\n    })\r\n})\r\napp.post(\"/newAPIKey\",mustBeLoggedIn(\"You must be logged in to create an API key\"),async (req,res)=>{\r\n    const { uid } = req.body;\r\n    var key = generateAPIKey();\r\n    var botUid = guid();\r\n    try{\r\n        await dbManager.addAPIKey(uid,key,botUid);\r\n        await apiKeyManager.createBot(uid,key,botUid);\r\n        res.status(200).json({\r\n            key,\r\n            botUid,\r\n            message: key + \" successfully created\",\r\n            color: \"green\"\r\n        });\r\n    }catch(err){\r\n        res.status(500).json({\r\n            message:err.message,\r\n            color: \"red\"\r\n        })\r\n    }\r\n\r\n})\r\napp.post(\"/verifyEmail\", async (req, res) => {\r\n    if (req.session.verificationCode && req.session.user) {\r\n        const { code } = req.body;\r\n        if (code == req.session.verificationCode) {\r\n            await dbManager.setVerified(req.session.user.uid);\r\n            res.status(200).json({ message: req.session.user.email + \" successfully verified\", color: \"green\", \"redirect\": \"/account\" })\r\n        } else {\r\n            res.status(200).json({ message: \"Incorrect code\", color: \"gold\" });\r\n        }\r\n    } else {\r\n        res.status(200).json({ message: \"Not logged in\", color: \"green\", \"redirect\": \"/login\" });\r\n    }\r\n})\r\napp.post('/signup', async (req, res) => {\r\n    const { username, password, age, email } = req.body;\r\n\r\n    try {\r\n\r\n\r\n        // Create user in the database\r\n        var userCheck = await dbManager.getDataByEmail(email);\r\n        if (userCheck.Items.length == 0) {\r\n            await dbManager.createUser(email, username, password, false, age)\r\n            const user = await dbManager.getDataByEmail(email)\r\n            // Return success response\r\n            var sUser = user.Items[0];\r\n            delete sUser.passwordHash;\r\n            req.session.user = sUser;\r\n            res.status(200).json({ message: 'Account created successfully', redirect: \"/verifyEmail\", color: \"green\" });\r\n        } else {\r\n            return res.status(405).json({ message: \"Account with that email already exists\", color: \"red\" })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ error: 'Internal server error', color: \"red\" });\r\n    }\r\n});\r\n// Update account endpoint\r\napp.put('/account',mustBeLoggedIn(\"You must be logged in to modify your account\"), async (req, res) => {\r\n    const { uid, newUsername, newPassword } = req.body;\r\n\r\n    try {\r\n        // Update username in the database\r\n        if (newUsername) {\r\n            await dbManager.updateUsername(uid, filter.clean(newUsername));\r\n        }\r\n        if (newPassword) {\r\n            await dbManager.updatePassword(uid, newPassword)\r\n        }\r\n\r\n        // Return success response\r\n        return res.status(200).json({ message: 'Account updated successfully', color: \"green\" });\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: 'Internal server error', color: \"red\" });\r\n    }\r\n});\r\n\r\n// Delete account endpoint\r\napp.delete('/account', mustBeLoggedIn(\"You must bel logged in to delete your account\"),async (req, res) => {\r\n    const { uid } = req.body;\r\n\r\n    try {\r\n        // Delete user from the database\r\n        await dbManager.deleteUser(uid);\r\n\r\n        // Return success response\r\n        return res.status(200).json({ message: 'Account deleted successfully', redirect: \"/login\" });\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: 'Internal server error', color: \"red\" });\r\n    }\r\n});\r\n\r\n// Login endpoint\r\napp.post('/login', async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n        // Retrieve user data by email\r\n        const userData = await dbManager.getDataByEmail(email);\r\n        if (userData.Items.length === 0) {\r\n            return res.status(400).json({ message: 'Invalid email or password', color: \"red\" });\r\n        }\r\n\r\n        const user = userData.Items[0];\r\n\r\n        // Verify password (replace with your own password verification logic)\r\n        if (user.passwordHash !== password) {\r\n            return res.status(400).json({ message: 'Invalid email or password', color: \"red\" });\r\n        }\r\n\r\n        // Set session data\r\n        delete user.passwordHash;\r\n        req.session.user = user;\r\n\r\n        // Return success response\r\n        return res.status(200).json({ message: 'Login successful', color: \"green\", redirect: \"/account\" });\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: err.message, color: \"red\" });\r\n    }\r\n});\r\n\r\n\r\napp.post('/verify-recaptcha', async (req, res) => {\r\n    const ipAddress = IP.address();\r\n    const { token } = req.body;\r\n    const verifyUrl = `https://www.google.com/recaptcha/api/siteverify?secret=${process.env[\"CAPTCHA_KEY\"]}&response=${token}&remoteip=${ipAddress}`;\r\n\r\n    try {\r\n        const response = await axios.post(verifyUrl);\r\n        const data = response.data;\r\n\r\n        if (data) {\r\n            var possibleKeys = [];\r\n            if (req.session && req.session.user) {\r\n                possibleKeys = await apiKeyManager.getAPIKeysForUid(req.session.user.uid);\r\n            }\r\n            // Generate and assign a key to the client\r\n            const key = (possibleKeys[0]) ? possibleKeys[0].api_key : generateAPIKey();\r\n            const expiredAt = new Date().getTime() + (1000 * 60 * 60);\r\n            const uid = (req.session && req.session.user) ? req.session.user.uid || null : null;\r\n\r\n            await apiKeyManager.addKey(key, expiredAt, uid)\r\n\r\n            // Send the key via websockets or any other method you're using\r\n            res.status(200).json({ success: true, key });\r\n        } else {\r\n            res.status(400).json({ success: false, message: 'reCAPTCHA verification failed.' });\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n        res.status(500).json({ success: false, message: 'Error verifying reCAPTCHA.' });\r\n    }\r\n});\r\napp.get('/api/v1/rooms', (req, res) => {\r\n    var reems = json2array(manager.rooms);\r\n    reems = reems.map((reem) => {\r\n        var snakesArray = json2array(reem.snakes);\r\n        var reemSnakes = snakesArray.filter((snake) => {\r\n            if (snake !== \"dead_snake\") {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n        return {\r\n            \"room_key\": reem.key,\r\n            \"type\": reem.type,\r\n            \"alive_snakes\": reemSnakes,\r\n            \"snake_quantity\": reemSnakes.length,\r\n            \"apple_pos\": reem.apple,\r\n            \"current_obstacles\": reem.obs,\r\n            \"room_size\": reem.by,\r\n        }\r\n    })\r\n    res.json(reems);\r\n});\r\n\r\napp.use((req,res)=>{\r\n    res.render(\"404.njk\");\r\n})\r\n\r\n\r\n\r\nserver.listen(3001, () => {\r\n    console.log('Server Live');\r\n});\r\nmodule.exports = { server, app }\r\n","const { randomUUID } = require(\"crypto\");\r\nfunction generateName() {\r\n    var start = [\r\n        'flying',\r\n        'blue',\r\n        'pink',\r\n        'jumping',\r\n        'invisible',\r\n        'red',\r\n        'dancing',\r\n        'running',\r\n        'yellow'\r\n    ];\r\n    var end = [\r\n        'Tangerine',\r\n        'Orange',\r\n        'Helicopter',\r\n        'Snake',\r\n        'Toad',\r\n        'Ninja',\r\n        'Goose',\r\n        'Banana',\r\n        'Duck'\r\n    ];\r\n    var ending = start[Math.floor(Math.random() * start.length)] + end[Math.floor(Math.random() * end.length)] + Math.round(Math.random() * 100);\r\n    return ending;\r\n}\r\nfunction pickColor() {\r\n    var colors = [\r\n        \"red\",\r\n        \"orange\",\r\n        \"green\",\r\n        \"blue\",\r\n        \"purple\",\r\n        \"white\",\r\n        \"lightgreen\",\r\n        \"yellow\",\r\n        \"pink\",\r\n        \"coral\",\r\n        \"lightblue\",\r\n        \"deepskyblue\",\r\n        \"greenyellow\",\r\n        \"darkorange\"\r\n    ]\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n}\r\nfunction oddsOf(percent) {\r\n    let odd = percent / 100;\r\n    return (Math.random() < odd)\r\n}\r\nfunction json2array(json) {\r\n    var result = [];\r\n    var keys = Object.keys(json);\r\n    keys.forEach(function (key) {\r\n        var endJSON = json[key];\r\n        endJSON.key = key\r\n        result.push(endJSON);\r\n    });\r\n    return result;\r\n}\r\nfunction sumArrays(...arrays) {\r\n    const n = arrays.reduce((max, xs) => Math.max(max, xs.length), 0);\r\n    const result = Array.from({ length: n });\r\n    return result.map((_, i) => arrays.map(xs => xs[i] || 0).reduce((sum, x) => sum + x, 0));\r\n}\r\nfunction guid(){\r\n    return randomUUID();\r\n};\r\nfunction manhattanDistance(point1, point2) {\r\n    return Math.abs(point1[0] - point2[0]) + Math.abs(point1[1] - point2[1]);\r\n}\r\n\r\n\r\nfunction directionVector(direction) {\r\n    switch (direction) {\r\n        case \"up\":\r\n            return [0, -1];\r\n        case \"down\":\r\n            return [0, 1];\r\n        case \"left\":\r\n            return [-1, 0];\r\n        case \"right\":\r\n            return [1, 0];\r\n        default:\r\n            throw new Error(`Invalid direction: ${direction}`);\r\n    }\r\n}\r\nfunction generateAPIKey() {\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let apiKey = '';\r\n\r\n    for (let i = 0; i < 32; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        apiKey += characters.charAt(randomIndex);\r\n    }\r\n\r\n    return apiKey;\r\n}\r\nfunction rand(digits) {\r\n    return Math.floor(Math.random() * parseInt('8' + '9'.repeat(digits - 1)) + parseInt('1' + '0'.repeat(digits - 1)));\r\n}\r\nfunction isEmptyObject(obj) {\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nmodule.exports = {\r\n    isEmptyObject,\r\n    generateName,\r\n    oddsOf,\r\n    json2array,\r\n    sumArrays,\r\n    guid,\r\n    pickColor,\r\n    manhattanDistance,\r\n    directionVector,\r\n    generateAPIKey,\r\n    rand\r\n}","const { json2array } = require(\"../etc/helpers.js\");\r\n\r\nclass Manager{\r\n  constructor(){\r\n    this.rooms = {};\r\n    this.snakes = {};\r\n    this.ticking = false;\r\n  }\r\n\r\n  kill(uid){\r\n    if(this.snakes[uid]){\r\n      var room = this.snakes[uid].room;\r\n      if(this.rooms[room]){\r\n        this.rooms[room].killSnake(uid);\r\n        delete this.snakes[uid];\r\n      }\r\n    }\r\n  }\r\n  addSnake(snake){\r\n    this.snakes[snake.uid] = snake;\r\n  }\r\n  getSnake(uid){\r\n    return this.snakes[uid];\r\n  }\r\n  createRoom(room){\r\n    if(!this.ticking){\r\n      this.ticking = true;\r\n    }\r\n    this.rooms[room.uid] = room;\r\n  }\r\n  getRoom(id){\r\n    return this.rooms[id];\r\n  }\r\n  resetRoom(id){\r\n    if(this.rooms[id]){\r\n      this.rooms[id].reset();\r\n    }\r\n  }\r\n  deleteRoom(id){\r\n    delete this.rooms[id]\r\n  }\r\n  online(){\r\n    var online = 0;\r\n    online += json2array(this.snakes).length;\r\n  }\r\n}\r\n\r\nvar server1 = new Manager();\r\nexports.manager = server1;","const AWS = require(\"aws-sdk\");\r\nconst { guid } = require(\"../etc/helpers.js\");\r\n\r\nAWS.config.update({\r\n  region: \"us-west-2\",\r\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\r\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\r\n});\r\n\r\n\r\nconst sqlite3 = require('sqlite3');\r\nconst { open } = require('sqlite');\r\n\r\nclass ApiKeyManager {\r\n  constructor(databasePath) {\r\n    this.databasePath = databasePath;\r\n    this.db = null;\r\n    this.onready = () => {};\r\n    this.ready = false;\r\n    this.initializeDatabase()\r\n      .then((db) => {\r\n        this.db = db;\r\n        this.onready(this.db);\r\n        this.scheduleExpiredKeysDeletion();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  async initializeDatabase() {\r\n    try {\r\n      const db = await open({\r\n        filename: this.databasePath,\r\n        driver: sqlite3.Database,\r\n      });\r\n      await db.run(`\r\n        CREATE TABLE IF NOT EXISTS api_keys (\r\n          api_key TEXT PRIMARY KEY,\r\n          expiredAt INTEGER,\r\n          uid TEXT,\r\n          isBot BOOLEAN,\r\n          linkedAccount TEXT NULL\r\n        )\r\n      `);\r\n      console.log('Database initialized successfully.');\r\n      return db;\r\n    } catch (err) {\r\n      console.error('Error initializing database:', err);\r\n      \r\n    }\r\n  }\r\n\r\n  async addKey(apiKey, expiredAt, uid) {\r\n    try {\r\n      await this.db.run(\r\n        `\r\n        INSERT INTO api_keys (api_key, expiredAt, uid, isBot, linkedAccount)\r\n        VALUES (?, ?, ?, ?, ?)\r\n        ON CONFLICT(api_key) DO UPDATE SET expiredAt = excluded.expiredAt, uid = excluded.uid\r\n        `,\r\n        [apiKey, expiredAt, uid, 0, null]\r\n      );\r\n    } catch (err) {\r\n      console.error('Error adding API key:', err);\r\n    }\r\n  }\r\n  async createBot(linkedAccount, key, uid){\r\n    try{\r\n    await this.db.run(\r\n      `\r\n      INSERT INTO api_keys (api_key, expiredAt, uid, isBot, linkedAccount)\r\n      VALUES (?, ?, ?, ?, ?)\r\n      `,\r\n      [key, 0, uid, 1, linkedAccount]\r\n    )\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n  async updateUid(apiKey, uid) {\r\n    try {\r\n      await this.db.run(`UPDATE api_keys SET uid = ? WHERE api_key = ?`, [uid, apiKey]);\r\n    } catch (err) {\r\n      console.error('Error updating UID:', err);\r\n    }\r\n  }\r\n\r\n  async deleteKey(apiKey) {\r\n    try {\r\n      await this.db.run(`DELETE FROM api_keys WHERE api_key = ?`, [apiKey]);\r\n      console.log('API key deleted successfully.');\r\n    } catch (err) {\r\n      console.error('Error deleting API key:', err);\r\n    }\r\n  }\r\n\r\n  async isKeyExpired(apiKey) {\r\n    try {\r\n      const row = await this.db.get(`SELECT expiredAt FROM api_keys WHERE api_key = ?`, [apiKey]);\r\n      const currentTime = new Date().getTime();\r\n      const expiredAt = row && row.expiredAt ? row.expiredAt : 0;\r\n\r\n      return expiredAt > 0 && expiredAt < currentTime;\r\n    } catch (err) {\r\n      console.error('Error checking expiration status:', err);\r\n    }\r\n  }\r\n  async getAPIKeysForUid(uid){\r\n    try{\r\n      const rows = await this.db.all(`SELECT api_key FROM api_keys WHERE uid = ?`,[uid]);\r\n      return rows;\r\n    }catch(err){\r\n      console.error(err)\r\n    }\r\n  }\r\n  async getAPIKey(apiKey) {\r\n    try {\r\n      const row = await this.db.get(`SELECT expiredAt, uid FROM api_keys WHERE api_key = ?`, [apiKey]);\r\n      if (!row) {\r\n        return false;\r\n      } else {\r\n        const expiredAt = row.expiredAt || 0;\r\n        const uid = row.uid || null;\r\n        return { expiredAt, uid };\r\n      }\r\n    } catch (err) {\r\n      console.error('Error retrieving API key:', err);\r\n      \r\n    }\r\n  }\r\n\r\n  async deleteExpiredKeys() {\r\n    try {\r\n      await this.db.run('DELETE FROM api_keys WHERE expiredAt < ? AND isBot = ?', [Date.now(),0]);\r\n      console.log('Expired API keys deleted successfully.');\r\n    } catch (err) {\r\n      console.error('Error deleting expired API keys:', err);\r\n      \r\n    }\r\n  }\r\n\r\n  scheduleExpiredKeysDeletion() {\r\n    this.deleteExpiredKeys();\r\n    setInterval(() => {\r\n      if (this.ready) {\r\n        this.deleteExpiredKeys();\r\n      }\r\n    }, 60 * 60 * 1000); // Run every hour (in milliseconds)\r\n  }\r\n}\r\n\r\nconst apiKeyManager = new ApiKeyManager('api_keys.db');\r\napiKeyManager.onready =async (db) => {\r\n  apiKeyManager.ready = true;\r\n};\r\n\r\n\r\n\r\n\r\nclass DBManager{\r\n  constructor(){\r\n    this.TABLE_NAME = \"multisnake\";\r\n    const DynamoDB = new AWS.DynamoDB();\r\n    this.dynamoClient = new AWS.DynamoDB.DocumentClient();\r\n    this.schema = {\r\n      \"uid\":\"string\",\r\n      \"username\":\"string\",\r\n      \"email\":\"string\",\r\n      \"gamesPlayed\":\"Integer\",\r\n      \"gamesWon\":\"Integer\",\r\n      \"passwordHash\":\"string\",\r\n      \"verified\":\"boolean\",\r\n      \"yearBorn\":\"Integer\",\r\n      \"api_keys\":\"String[]\"\r\n    }\r\n  }\r\n  async winGame(uid, timeToWin) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      UpdateExpression: \"SET gamesWon = gamesWon + :incr\",\r\n      ExpressionAttributeValues: {\r\n        \":incr\": 1,\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.update(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  \r\n  async playGame(uid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      UpdateExpression: \"SET gamesPlayed = gamesPlayed + :incr\",\r\n      ExpressionAttributeValues: {\r\n        \":incr\": 1\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.update(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  \r\n  async createUser(email,username,passwordHash,verified,age){\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Item: {\r\n        uid: guid(),\r\n        username,\r\n        email,\r\n        gamesPlayed: 0,\r\n        gamesWon: 0,\r\n        fastestTimeToWin: Number.MAX_SAFE_INTEGER,\r\n        passwordHash,\r\n        verified,\r\n        yearBorn: age,\r\n        timestamp: new Date().getTime()\r\n      }\r\n    }\r\n    try {\r\n      const data = await this.dynamoClient.put(params).promise();\r\n      return data\r\n    } catch (err){\r\n      console.log(err);\r\n    }\r\n  }\r\n  async setVerified(uid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      UpdateExpression: \"SET #v = :val\",\r\n      ExpressionAttributeNames: {\r\n        \"#v\": \"verified\"\r\n      },\r\n      ExpressionAttributeValues: {\r\n        \":val\": true\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.update(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async updateUsername(uid, newUsername) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      UpdateExpression: \"SET #un = :username\",\r\n      ExpressionAttributeNames: {\r\n        \"#un\": \"username\"\r\n      },\r\n      ExpressionAttributeValues: {\r\n        \":username\": newUsername\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.update(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async deleteUser(uid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.delete(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async isOldEnough(uid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      ProjectionExpression: \"yearBorn\"\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.get(params).promise();\r\n      const userAge = data.Item.yearBorn;\r\n      return new Date().getFullYear() - userAge > 13;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async isVerified(uid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      ProjectionExpression: \"verified\"\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.get(params).promise();\r\n      const isVerified = data.Item.verified;\r\n      return isVerified === true;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async updatePassword(uid, newPasswordHash) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      UpdateExpression: \"SET #pw = :password\",\r\n      ExpressionAttributeNames: {\r\n        \"#pw\": \"passwordHash\"\r\n      },\r\n      ExpressionAttributeValues: {\r\n        \":password\": newPasswordHash\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.update(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n      \r\n  async getDataByEmail(email){\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      IndexName: \"email-index\",\r\n      ExpressionAttributeValues: {\r\n        \":e\": email\r\n      },\r\n      KeyConditionExpression: \"email = :e\"\r\n    };\r\n    try {\r\n      const data = await this.dynamoClient.query(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async getUser(uid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.get(params).promise();\r\n      return data.Item;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async addAPIKey(uid, apiKey, botUid) {\r\n    const params = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      },\r\n      UpdateExpression: \"SET #ak = list_append(if_not_exists(#ak, :empty_list), :apiKey)\",\r\n      ExpressionAttributeNames: {\r\n        \"#ak\": \"api_keys\"\r\n      },\r\n      ExpressionAttributeValues: {\r\n        \":empty_list\": [],\r\n        \":apiKey\": [\r\n          {\r\n            apiKey,\r\n            botUid\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  \r\n    try {\r\n      const data = await this.dynamoClient.update(params).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  \r\n  async removeAPIKey(uid, apiKey) {\r\n    const getParams = {\r\n      TableName: this.TABLE_NAME,\r\n      Key: {\r\n        uid\r\n      }\r\n    };\r\n  \r\n    try {\r\n      let data = await this.dynamoClient.get(getParams).promise();\r\n      const apiKeys = data.Item.api_keys || [];\r\n  \r\n      // Remove the apiKey from the list\r\n      const updatedKeys = apiKeys.filter(key => key.apiKey !== apiKey);\r\n  \r\n      const updateParams = {\r\n        TableName: this.TABLE_NAME,\r\n        Key: {\r\n          uid\r\n        },\r\n        UpdateExpression: \"SET #ak = :updatedKeys\",\r\n        ExpressionAttributeNames: {\r\n          \"#ak\": \"api_keys\"\r\n        },\r\n        ExpressionAttributeValues: {\r\n          \":updatedKeys\": updatedKeys\r\n        },\r\n        ReturnValues: \"UPDATED_NEW\"\r\n      };\r\n  \r\n      // Update the item with the modified list\r\n      data = await this.dynamoClient.update(updateParams).promise();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  \r\n  \r\n  async sendVerification(email, code) {\r\n    const params = {\r\n      Destination: {\r\n        ToAddresses: [email]\r\n      },\r\n      Message: {\r\n        Body: {\r\n          Html: {\r\n            Charset: \"UTF-8\",\r\n            Data: \"<h1>Hello \" + email + \"</h1><p>Your Multisnake V2 verification code is \" + code + \"</p>\"\r\n          },\r\n          Text: {\r\n            Charset: \"UTF-8\",\r\n            Data: \"Hello \" + email + \"\\n. Your Multisnake V2 verification code is\" + code\r\n          }\r\n        },\r\n        Subject: {\r\n          Charset: \"UTF-8\",\r\n          Data: \"[Multisnake V2] Verification Code\"\r\n        }\r\n      },\r\n      Source: \"sojscoder@gmail.com\",\r\n      ReplyToAddresses: [\r\n        \"sojscoder@gmail.com\"\r\n      ]\r\n    };\r\n    var sendPromise = new AWS.SES({\r\n      apiVersion: '2010-12-01'\r\n    }).sendEmail(params).promise();\r\n    sendPromise.then(function(data) {}).catch(function(err) {console.error(err, err.stack);});\r\n  }\r\n}\r\n\r\n\r\nconst dbManager = new DBManager();\r\nmodule.exports = {\r\n  apiKeyManager,\r\n  dbManager\r\n}","const { server } = require(\"./app.js\");\r\nconst { Server } = require(\"socket.io\");\r\nconst io = new Server(server);\r\n\r\nmodule.exports = { io }","const { manager } = require(\"../managers/roomManager.js\");\r\nconst { Snake } = require(\"../objects/snake.js\");\r\nconst { guid, generateName, json2array, pickColor, isEmptyObject } = require(\"../etc/helpers.js\");\r\nconst { hashMap } = require(\"../objects/room.js\");\r\nconst { io } = require(\"./webs.js\");\r\nconst { createMarkdown } = require(\"safe-marked\")\r\nconst markdown = createMarkdown();\r\nconst { Bot } = require(\"../bots/bots.js\");\r\nconst { apiKeyManager } = require(\"../managers/databaseManager.js\");\r\nvar Filter = require('bad-words'),\r\n    filter = new Filter();\r\n\r\nvar xss = require(\"xss\");\r\n\r\n\r\nvar SPAWN_REQUEST_TRACKER = {};\r\n\r\n/*\r\n\r\nid: SocketID{\r\n  willSpawnBot: Boolean\r\n  api_key: String,\r\n  uid\r\n}\r\n*/\r\nio.on(\"connection\", (socket) => {\r\n    socket.on(\"request_optimal_spawn\", (data) => {\r\n        var room = data.room;\r\n        var roomRef = manager.getRoom(room);\r\n\r\n\r\n        if (roomRef) {\r\n            socket.emit(\"optimal_spawn\", {\r\n                optimal_spawn: roomRef.optimalNextSpawn()\r\n            })\r\n        }\r\n    })\r\n    socket.on(\"spawn_request\", (data) => {\r\n        if (SPAWN_REQUEST_TRACKER[socket.id]) {\r\n            SPAWN_REQUEST_TRACKER[socket.id].willSpawnBot = data.bot;\r\n        } else {\r\n            SPAWN_REQUEST_TRACKER[socket.id] = {\r\n                willSpawnBot: data.bot,\r\n                uid: (data.uid) ? data.uid || guid() : guid(),\r\n                api_key: data.api_key\r\n            }\r\n        }\r\n        var username = (data.username) ? data.username : generateName();\r\n        var spawn = data.spawn;\r\n        var roomString = data.room;\r\n        var roomType = roomString.split(\"-\")[0] || \"standard\";\r\n        var room = roomString;\r\n        var roomToJoin = manager.getRoom(room);\r\n        if (roomToJoin) {\r\n            var id = SPAWN_REQUEST_TRACKER[socket.id].uid || guid();\r\n            var snakeToCreate = new Snake(id, username, pickColor(), room, spawn, SPAWN_REQUEST_TRACKER[socket.id].willSpawnBot);\r\n            if (SPAWN_REQUEST_TRACKER[socket.id].loggedIn) {\r\n                snakeToCreate.login();\r\n            }\r\n            roomToJoin.addSnake(snakeToCreate);\r\n            manager.addSnake(snakeToCreate);\r\n        } else {\r\n            var id = SPAWN_REQUEST_TRACKER[socket.id].uid || guid();\r\n            var roomToCreate = new hashMap[roomType](room, room);\r\n            manager.createRoom(roomToCreate);\r\n            var room = manager.getRoom(roomToCreate.uid);\r\n            var snakeToCreate = new Snake(id, username, pickColor(), roomToCreate.uid, spawn, SPAWN_REQUEST_TRACKER[socket.id].willSpawnBot);\r\n            id = snakeToCreate.uid;\r\n            if (SPAWN_REQUEST_TRACKER[socket.id].loggedIn) {\r\n                snakeToCreate.login();\r\n            }\r\n            room.addSnake(snakeToCreate);\r\n            manager.addSnake(snakeToCreate);\r\n            socket.join(room.uid);\r\n        }\r\n    })\r\n    socket.on(\"join_request\", async (data) => {\r\n        var room = data.room;\r\n        var api_key = data.api_key;\r\n        var uidPlease = data.uidPlease;\r\n        var key_data = await apiKeyManager.getAPIKey(api_key);\r\n\r\n        var roomString = data.room;\r\n        var roomType = roomString.split(\"-\")[0] || \"standard\";\r\n        var room = roomString;\r\n        var roomToJoin = manager.getRoom(room);\r\n        var id = (uidPlease) ? uidPlease : guid();\r\n        var loggedIn = (uidPlease) ? true : false;\r\n\r\n        var room_key = null;\r\n        if (roomToJoin) {\r\n            socket.join(roomToJoin.uid);\r\n            room_key = roomToJoin.uid;\r\n        } else {\r\n            var roomToCreate = new hashMap[roomType](room, room);\r\n            manager.createRoom(roomToCreate);\r\n            var room = manager.getRoom(roomToCreate.uid);\r\n            roomToJoin = room;\r\n            var room_key = room.uid;\r\n        }\r\n        if (key_data) {\r\n            if (key_data.isBot == 1 || key_data.expiredAt > new Date().getTime()) {\r\n                if (!manager.getSnake(key_data.uid)) {\r\n                    await apiKeyManager.updateUid(api_key, id)\r\n                    SPAWN_REQUEST_TRACKER[socket.id] = {\r\n                        uid: id,\r\n                        api_key,\r\n                        loggedIn,\r\n                        willSpawnBot: (data.bot) ? true : false\r\n                    }\r\n                    socket.join(room_key);\r\n                    socket.emit(\"join_request_respond\", {\r\n                        uid: id,\r\n                        room: roomToJoin,\r\n                    });\r\n                } else {\r\n                    socket.emit(\"error\", {\r\n                        code: 100,\r\n                        message: \"A player already exists with this API key.\",\r\n                        otherPlayer: manager.getSnake(key_data.uid)\r\n                    })\r\n                }\r\n            } else {\r\n                socket.emit(\"error\", {\r\n                    code: 101,\r\n                    message: \"Your API key is expired - if you're running this game in the browser, try refreshing the page.\"\r\n                })\r\n            }\r\n\r\n        } else {\r\n            socket.emit(\"error\", {\r\n                code: 102,\r\n                message: \"API key does not exist\"\r\n            });\r\n        }\r\n    });\r\n    socket.on(\"ping\", (data) => {\r\n        socket.emit(\"pong\", data);\r\n    });\r\n    socket.on(\"change_direction\", async (data) => {\r\n        var api_key = data.api_key;\r\n        var snake = manager.getSnake(data.uid);\r\n\r\n        var key_data = await apiKeyManager.getAPIKey(api_key);\r\n\r\n        if (!key_data) {\r\n            socket.emit(\"error\", {\r\n                code: 102,\r\n                message: \"API key does not exist\"\r\n            })\r\n        } else if (key_data.uid == data.uid) {\r\n            if (key_data.isBot == 1 || key_data.expiredAt > new Date().getTime()) {\r\n                var snake = manager.getSnake(data.uid);\r\n                if (snake && !isEmptyObject(snake)) {\r\n                    snake.changeDirection(data.direction);\r\n                };\r\n            } else {\r\n                socket.emit(\"error\", {\r\n                    code: 101,\r\n                    message: \"API key expired\"\r\n                });\r\n            }\r\n        } else {\r\n            socket.emit(\"error\", {\r\n                code: 103,\r\n                message: \"API key and UID mismatch\"\r\n            });\r\n            var snake = manager.getSnake(data.uid);\r\n            if (snake && !isEmptyObject(snake)) {\r\n                io.to(snake.getRoom().uid).emit(\"chat\", {\r\n                    from: \"System\",\r\n                    message: `Someone seems to be trying to hack ${snake.name}. Watch out!`\r\n                });\r\n            }\r\n        }\r\n    });\r\n    socket.on(\"chat\", async (data) => {\r\n        try {\r\n            var api_key = data.api_key;\r\n            var snake = manager.getSnake(data.uid);\r\n\r\n            var key_data = await apiKeyManager.getAPIKey(api_key);\r\n\r\n            if (!key_data) {\r\n                socket.emit(\"error\", {\r\n                    code: 102,\r\n                    message: \"API key does not exist\"\r\n                })\r\n            } else if (key_data.uid == data.uid) {\r\n                if (key_data.isBot == 1 || key_data.expiredAt > new Date().getTime()) {\r\n                    var from = data.from || \"No one\";\r\n                    from = xss(from);\r\n                    from = filter.clean(from);\r\n        \r\n        \r\n                    var message = data.message;\r\n                    message = message.split(\"\\n\");\r\n                    message = message.map(phrase => {\r\n                        phrase = phrase || \"<delete>\";\r\n                        return filter.clean(phrase)\r\n                    }).filter((phrase) => phrase !== \"<delete>\")\r\n                    message = message.join(\"\\n\");\r\n                    message = markdown(message);\r\n                    var room = data.room;\r\n        \r\n                    io.to(room).emit(\"chat\", {\r\n                        from,\r\n                        message\r\n                    })\r\n                } else {\r\n                    socket.emit(\"error\", {\r\n                        code: 101,\r\n                        message: \"API key expired\"\r\n                    });\r\n                }\r\n            } else {\r\n                socket.emit(\"error\", {\r\n                    code: 103,\r\n                    message: \"API key and UID mismatch\"\r\n                });\r\n                var snake = manager.getSnake(data.uid);\r\n                if (snake && !isEmptyObject(snake)) {\r\n                    io.to(snake.getRoom().uid).emit(\"chat\", {\r\n                        from: \"System\",\r\n                        message: `Someone seems to be trying to hack ${snake.name}. Watch out!`\r\n                    });\r\n                }\r\n            }\r\n            \r\n        } catch (err) {\r\n            io.emit(\"error\", {\r\n                code: 200,\r\n                message: \"Failed to send message\",\r\n                error: err\r\n            })\r\n        }\r\n    })\r\n});\r\n\r\nmodule.exports = {\r\n\r\n}","const { manager } = require(\"../managers/roomManager.js\");\r\nconst { sumArrays } = require(\"../etc/helpers.js\");\r\nconst { dbManager } = require(\"../managers/databaseManager.js\");\r\nclass Snake{\r\n  constructor(uid,name,color,room,spawn,isBot=false){\r\n    this.uid = uid;\r\n    this.name = name;\r\n    this.color = color;\r\n    this.bot = isBot;\r\n    this.loggedIn = false;\r\n    this.directionMap = {\r\n      \"up\":[0,1],\r\n      \"down\":[0,-1],\r\n      \"left\":[-1,0],\r\n      \"right\":[1,0]\r\n    }\r\n    if(spawn){\r\n      if(spawn.point){\r\n        this.body = [spawn.point]\r\n      }else{\r\n        this.body = [[Math.floor(Math.random() * (manager.getRoom(room).size*0.75)),Math.floor(Math.random() * (manager.getRoom(room).size*0.75))]]\r\n      }\r\n      if(spawn.direction){\r\n        this.direction = spawn.direction\r\n      }else{\r\n        this.direction = Object.keys(this.directionMap)[Math.floor(Math.random() * Object.keys(this.directionMap).length)];\r\n      }\r\n    }else{\r\n      this.direction = Object.keys(this.directionMap)[Math.floor(Math.random() * Object.keys(this.directionMap).length)];\r\n      this.body = [[Math.floor(Math.random() * (manager.getRoom(room).size*0.75)),Math.floor(Math.random() * (manager.getRoom(room).size*0.75))]]\r\n    }\r\n    this.score = this.body.length;\r\n    this.speed = 0;\r\n    this.room = room;\r\n    this.eating = false;\r\n    this.creationTime = new Date().getTime();\r\n  }\r\n  login(){\r\n    this.loggedIn = true;\r\n  }\r\n  getRoom(){\r\n    return manager.getRoom(this.room);\r\n  }\r\n  kill(){\r\n    manager.kill(this.uid);\r\n    delete this;\r\n  }\r\n  changeDirection(direction){\r\n    this.direction = direction;\r\n  }\r\n  move(){\r\n    var head = this.body[0];\r\n    var newBlock = sumArrays(head,this.directionMap[this.direction]);\r\n    if(!this.eating){\r\n      this.body.pop();\r\n    }else{\r\n      this.eating = false;\r\n    }\r\n    this.body.unshift(newBlock);\r\n  }\r\n  checkAction(){\r\n    var head = this.body[0];\r\n    if(\r\n      head[0] < 0 ||\r\n      head[0] >= this.getRoom().size ||\r\n      head[1] < 0 ||\r\n      head[1] >= this.getRoom().size\r\n    ){\r\n      this.kill();\r\n      return;\r\n    }\r\n    if((this.getRoom().apple[0] == head[0]) && (this.getRoom().apple[1] == head[1])){\r\n      this.eating = true;\r\n      this.getRoom().newApplePos();\r\n    }\r\n    for(var i = 1; i < this.body.length; i++){\r\n      if(head[0] == this.body[i][0] && head[1] == this.body[i][1]){\r\n        this.kill();\r\n        return;\r\n      }\r\n    }\r\n    this.getRoom().walls.forEach(wall=>{\r\n      if(head[0] == wall[0] && head[1] == wall[1]){\r\n        this.kill();\r\n        return;\r\n      }\r\n    });\r\n    for(var i = 0; i < this.getRoom().snakes.length; i++){\r\n      if(this.getRoom().snakes[i].uid == this.uid){\r\n        continue;\r\n      }\r\n      this.getRoom().snakes[i].body.forEach((part,j)=>{\r\n        if((part[0] == head[0]) && (part[1] == head[1])){\r\n          if(j == 0){\r\n            var enemySnakeScore = this.getRoom().snakes[i].body.length;\r\n            var ourScore = this.body.length;\r\n            if(enemySnakeScore > ourScore){\r\n              this.kill();\r\n              return;\r\n            }else if(enemySnakeScore < ourScore){\r\n              this.getRoom().snakes[i].kill()\r\n            }else if(enemySnakeScore == ourScore){\r\n              this.getRoom().snakes[i].kill();\r\n              this.kill();\r\n              return;\r\n            }\r\n          }else{\r\n            this.kill();\r\n            return;\r\n          }\r\n        }\r\n      })\r\n    }\r\n    var time2 = performance.now();\r\n  }\r\n}\r\nmodule.exports = {\r\n  Snake\r\n}","const {\r\n\toddsOf,\r\n\tmanhattanDistance,\r\n\tdirectionVector\r\n} = require(\"../etc/helpers.js\");\r\nconst {\r\n\tSnake\r\n} = require(\"./snake.js\");\r\nconst {\r\n\temitDeath,\r\n\temitWin\r\n} = require(\"../server/eventListener.js\");\r\nconst { dbManager } = require(\"../managers/databaseManager.js\");\r\n\r\nclass Room {\r\n\tconstructor(uid, size, friendly, winCondition) {\r\n\t\tthis.name = friendly;\r\n\t\tthis.uid = uid;\r\n\t\tthis.size = size;\r\n\t\tthis.snakes = [];\r\n\t\tthis.walls = [];\r\n\t\tthis.lastTouched = new Date().getTime()\r\n\t\tvar randomX = Math.floor(Math.random() * this.size);\r\n\t\tvar randomY = Math.floor(Math.random() * this.size);\r\n\t\tthis.apple = [randomX, randomY];\r\n\t\tthis.needsToBeDeleted = false;\r\n\t\tthis.winCondition = winCondition;\r\n\t\tthis.creationTime = new Date().getTime();\r\n\t\tthis.winAnnounced = false\r\n\t}\r\n\tasync tick() {\r\n\t\tif (this.walls.length > (this.size * this.size * 1 / 4)) {\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\tif ((new Date().getTime() - this.lastTouched) / 1000 / 60 > 1) {\r\n\t\t\tthis.reset();\r\n\t\t\tthis.needsToBeDeleted = true;\r\n\t\t} else {\r\n\t\t\tfor (var snake of this.snakes) {\r\n\t\t\t\tif (!snake.isBot) {\r\n\t\t\t\t\tthis.lastTouched = new Date().getTime();\r\n\t\t\t\t}\r\n\t\t\t\tif (snake.body.length >= this.winCondition && !this.winAnnounced) {\r\n\t\t\t\t\tthis.winAnnounced = true\r\n\t\t\t\t\temitWin(this.uid, snake.uid);\r\n\t\t\t\t\tif (snake.loggedIn) {\r\n\t\t\t\t\t\tawait dbManager.playGame(snake.uid);\r\n\t\t\t\t\t\tawait dbManager.winGame(snake.uid, new Date().getTime() - snake.creationTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.reset();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tsnake.move();\r\n\t\t\t\tsnake.checkAction();\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\tasync killSnake(uid) {\r\n\t\tvar pickedSnake = {};\r\n\t\tthis.snakes = this.snakes.filter(snake => {\r\n\t\t\tif (snake.uid == uid) {\r\n\t\t\t\tpickedSnake = snake\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\temitDeath(this.uid, pickedSnake.uid);\r\n\t\tif (pickedSnake.loggedIn) {\r\n\t\t\tawait dbManager.playGame(pickedSnake.uid);\r\n\t\t}\r\n\t}\r\n\treset() {\r\n\t\tthis.snakes = [];\r\n\t\tthis.walls = [];\r\n\t\tthis.apple = this.newApplePos();\r\n\t\tthis.creationTime = new Date().getTime()\r\n\t}\r\n\taddSnake(snake) {\r\n\t\tif (!snake.isBot) {\r\n\t\t\tthis.lastTouched = new Date().getTime();\r\n\t\t}\r\n\t\tthis.snakes.push(snake);\r\n\t}\r\n\toptimalNextSpawn() {\r\n\t\tvar matrix = this.generateMatrix();\r\n\t\tvar gradientMap = this.gradient(matrix, 4);\r\n\t\tvar lowest = 1;\r\n\t\tvar bestPoint = [];\r\n\r\n\t\tfor (var y = 0; y < gradientMap.length; y++) {\r\n\t\t\tfor (var x = 0; x < gradientMap[y].length; x++) {\r\n\t\t\t\tif (gradientMap[y][x] < lowest) {\r\n\t\t\t\t\tlowest = gradientMap[y][x];\r\n\t\t\t\t\tbestPoint = [x, y];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar directions = [\"up\", \"down\", \"left\", \"right\"];\r\n\t\tvar bestDirection = null;\r\n\t\tvar lowestSum = Infinity;\r\n\r\n\t\tfor (var i = 0; i < directions.length; i++) {\r\n\t\t\tvar sum = 0;\r\n\t\t\tvar dx = 0;\r\n\t\t\tvar dy = 0;\r\n\r\n\t\t\tswitch (directions[i]) {\r\n\t\t\t\tcase \"up\":\r\n\t\t\t\t\tdy = -1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"down\":\r\n\t\t\t\t\tdy = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tdx = -1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tdx = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var j = 1; j <= 10; j++) {\r\n\t\t\t\tvar ny = bestPoint[0] + j * dy;\r\n\t\t\t\tvar nx = bestPoint[1] + j * dx;\r\n\r\n\t\t\t\tif (ny >= 0 && ny < gradientMap.length && nx >= 0 && nx < gradientMap[0].length) {\r\n\t\t\t\t\tsum += gradientMap[ny][nx];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (sum < lowestSum) {\r\n\t\t\t\tlowestSum = sum;\r\n\t\t\t\tbestDirection = directions[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tpoint: bestPoint,\r\n\t\t\tdirection: bestDirection,\r\n\t\t\tgradientMap\r\n\t\t}\r\n\t}\r\n\r\n\tnewApplePos() {\r\n\t\tvar newAppleX = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\t\tvar newAppleY = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\t\tif (this.is_block_occupied([newAppleX, newAppleY])) {\r\n\t\t\treturn this.newApplePos();\r\n\t\t} else {\r\n\t\t\tthis.apple = [newAppleX, newAppleY]\r\n\t\t\treturn [newAppleX, newAppleY]\r\n\t\t}\r\n\t}\r\n\tgetApplePos() {\r\n\t\treturn this.apple;\r\n\t}\r\n\tdump() {\r\n\t\treturn {\r\n\t\t\tuid: this.uid,\r\n\t\t\tsnakes: this.snakes,\r\n\t\t\twalls: this.walls,\r\n\t\t\ttype: this.type,\r\n\t\t\tapple: this.apple,\r\n\t\t\tname: this.name,\r\n\t\t\tsize: this.size\r\n\t\t}\r\n\t}\r\n\tis_block_occupied(target) {\r\n\t\tvar foundblocks = this.walls.some(wall => {\r\n\t\t\treturn (\r\n\t\t\t\ttarget[0] == wall[0] && target[1] == wall[1]\r\n\t\t\t)\r\n\t\t});\r\n\t\tvar snakeFoundBlocks = this.snakes.some(snake => {\r\n\t\t\treturn snake.body.some(part => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\ttarget[0] == part[0] && target[1] == part[1]\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t})\r\n\t\tvar appleOccupies = (target[0] == this.apple[0] && target[1] == this.apple[1]);\r\n\t\tif (appleOccupies) {\r\n\t\t\treturn \"apple\"\r\n\t\t} else if (foundblocks) {\r\n\t\t\treturn \"wall\"\r\n\t\t} else if (snakeFoundBlocks) {\r\n\t\t\treturn \"snake\"\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tgenerateMatrix() {\r\n\t\tvar [snakes, walls, size] = [this.snakes, this.walls, this.size];\r\n\t\tconst matrix = new Array(size).fill(null).map(() => new Array(size).fill(0));\r\n\r\n\t\t// assign a 1 value to each body part coordinate of each snake\r\n\t\tfor (const snake of snakes) {\r\n            for (var i = 0; i < snake.body.length; i++){\r\n                const x = snake.body[i][0];\r\n                const y = snake.body[i][1];\r\n                matrix[y][x] = (snake.body.length - i) / snake.body.length\r\n            }\r\n\t\t}\r\n\r\n\t\t// assign a 1 value to each wall coordinate\r\n\t\tfor (const wall of walls) {\r\n\t\t\tconst x = wall[0];\r\n\t\t\tconst y = wall[1];\r\n\t\t\tmatrix[y][x] = 1;\r\n\t\t}\r\n\r\n\t\t// assign a 1 value to every border point on the matrix\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tmatrix[0][i] = 1;\r\n\t\t\tmatrix[size - 1][i] = 1;\r\n\t\t\tmatrix[i][0] = 1;\r\n\t\t\tmatrix[i][size - 1] = 1;\r\n\t\t}\r\n\r\n\t\treturn matrix;\r\n\t}\r\n\tgradient(mat, x) {\r\n\t\tconst temp = JSON.parse(JSON.stringify(mat)); // create a temporary matrix as a copy of mat\r\n\t\tconst size = mat.length;\r\n\r\n\t\tfor (let i = 0; i < x; i++) {\r\n\t\t\tfor (let y = 0; y < size; y++) {\r\n\t\t\t\tfor (let x = 0; x < size; x++) {\r\n\t\t\t\t\tif (mat[y][x] === 0) {\r\n\t\t\t\t\t\tlet sum = 0;\r\n\t\t\t\t\t\tlet count = 0;\r\n\t\t\t\t\t\tfor (let yOffset = -1; yOffset <= 1; yOffset++) {\r\n\t\t\t\t\t\t\tfor (let xOffset = -1; xOffset <= 1; xOffset++) {\r\n\t\t\t\t\t\t\t\tconst xCoord = x + xOffset;\r\n\t\t\t\t\t\t\t\tconst yCoord = y + yOffset;\r\n\t\t\t\t\t\t\t\tif (xCoord >= 0 && xCoord < size && yCoord >= 0 && yCoord < size && mat[yCoord][xCoord] !== 0) {\r\n\t\t\t\t\t\t\t\t\tsum += mat[yCoord][xCoord];\r\n\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (count > 0) {\r\n\t\t\t\t\t\t\ttemp[y][x] = sum / 8;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmat = JSON.parse(JSON.stringify(temp)); // update mat to the updated temporary matrix\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\t}\r\n\tscale2board(number) {\r\n\t\treturn Math.min(Math.max(0, number), this.size - 2);\r\n\t}\r\n}\r\nclass Classic extends Room{\r\n\tconstructor(uid,friendly){\r\n\t\tsuper(uid,25,friendly,10)\r\n\t}\r\n}\r\nclass Standard extends Room {\r\n\tconstructor(uid, friendly) {\r\n\t\tsuper(uid, 25, friendly, 10);\r\n\t\tthis.eatenUntilNextWall = 5;\r\n\t\tthis.baseEatenUntilNextWall = this.eatenUntilNextWall;\r\n\t}\r\n\t// This function generates a new position for an apple in a two-dimensional grid.\r\n\r\n\tnewApplePos() {\r\n\t\t// Generate a random X coordinate between 1 and the size of the grid minus 2\r\n\t\tvar newAppleX = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\r\n\t\t// Generate a random Y coordinate between 1 and the size of the grid minus 2\r\n\t\tvar newAppleY = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\r\n\t\t// Check if the new apple position is already occupied by a block\r\n\t\tif (this.is_block_occupied([newAppleX, newAppleY])) {\r\n\t\t\t// If the new position is occupied, call the function recursively to find a new position\r\n\t\t\treturn this.newApplePos();\r\n\t\t} else {\r\n\t\t\t// If the new position is not occupied, set the position of the apple object to the new position\r\n\t\t\tthis.apple = [newAppleX, newAppleY];\r\n\r\n\t\t\t// Check if it is time to spawn a new wall\r\n\t\t\tif (--this.eatenUntilNextWall <= 0) {\r\n\t\t\t\t// If the number of apples eaten since the last wall spawn is equal to or less than zero, call the spawnWall() function to create a new wall\r\n\t\t\t\tthis.spawnWall();\r\n\t\t\t\tthis.eatenUntilNextWall = this.baseEatenUntilNextWall;\r\n\t\t\t}\r\n\r\n\t\t\t// Return an array of the new apple's X and Y coordinates\r\n\t\t\treturn [newAppleX, newAppleY];\r\n\t\t}\r\n\t}\r\n\r\n\tspawnWall() {\r\n\t\tif (this) {\r\n\t\t\tif (oddsOf(75)) {\r\n\t\t\t\t// spawn block in a random location\r\n\t\t\t\tif (!this.walls[0]) {\r\n\t\t\t\t\tvar blockX = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\t\t\t\t\tvar blockY = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\t\t\t\t\tif (!this.is_block_occupied([blockX, blockY])) {\r\n\t\t\t\t\t\tthis.walls.push([blockX, blockY])\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// block already exists. try again.\r\n\t\t\t\t\t\tthis.spawnWall();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// spawn a block next to an existing block.\r\n\t\t\t\t\tvar side = Math.round(Math.random() * 3);\r\n\t\t\t\t\tvar pickedblock = this.walls[Math.floor(Math.random() * this.walls.length)];\r\n\t\t\t\t\tvar newblock = [];\r\n\t\t\t\t\tswitch (side) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tnewblock[0] = pickedblock[0];\r\n\t\t\t\t\t\t\tnewblock[1] = this.scale2board(pickedblock[1] - 1);\r\n\t\t\t\t\t\t\tif (!this.is_block_occupied([newblock[0], newblock[1]])) {\r\n\t\t\t\t\t\t\t\tthis.walls.push([newblock[0], newblock[1]]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.spawnWall()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\r\n\t\t\t\t\t\t\tnewblock[0] = pickedblock[0];\r\n\t\t\t\t\t\t\tnewblock[1] = this.scale2board(pickedblock[0] - 1);\r\n\t\t\t\t\t\t\tif (!this.is_block_occupied([newblock[0], newblock[1]])) {\r\n\t\t\t\t\t\t\t\tthis.walls.push([newblock[0], newblock[1]]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.spawnWall()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tnewblock[0] = pickedblock[0];\r\n\t\t\t\t\t\t\tnewblock[1] = this.scale2board(pickedblock[1] + 1);\r\n\t\t\t\t\t\t\tif (!this.is_block_occupied([newblock[0], newblock[1]])) {\r\n\t\t\t\t\t\t\t\tthis.walls.push([newblock[0], newblock[1]]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.spawnWall();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\tnewblock[0] = pickedblock[0];\r\n\t\t\t\t\t\t\tnewblock[1] = this.scale2board(pickedblock[0] + 1);\r\n\t\t\t\t\t\t\tif (!this.is_block_occupied([newblock[0], newblock[1]])) {\r\n\t\t\t\t\t\t\t\tthis.walls.push([newblock[0], newblock[1]]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.spawnWall()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// no walls exist yet... spawn one in a random location\r\n\t\t\t\tvar blockX = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\t\t\t\tvar blockY = Math.round((Math.random() * (this.size - 2 - 1)) + 1);\r\n\t\t\t\tif (!this.is_block_occupied[blockX, blockY], this) {\r\n\t\t\t\t\tthis.walls.push([blockX, blockY])\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.spawnWall()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nclass Small extends Room {\r\n\tconstructor(uid, friendly) {\r\n\t\tsuper(uid, 15, friendly, 5);\r\n\t}\r\n}\r\nmodule.exports = {\r\n\tRoom: Standard,\r\n\tClassic,\r\n\tSmall,\r\n\thashMap: {\r\n\t\t\"standard\":Standard,\r\n\t\t\"small\":Small,\r\n\t\t\"classic\":Classic\r\n\t}\r\n}\r\n","const { io } = require(\"./webs.js\");\r\n\r\nfunction emitBoard(room,tick_speed){\r\n  io.to(room.uid).emit(\"board_request_respond\",{ ...room.dump(),tick: tick_speed });\r\n}\r\nfunction emitDeath(roomID, snakeID){\r\n  io.to(roomID).emit(\"snake_death\",{uid:snakeID});\r\n}\r\nfunction emitWin(roomID,snakeID){\r\n  io.to(roomID).emit(\"win\",{uid:snakeID});\r\n}\r\nmodule.exports = {\r\n  emitDeath,\r\n  emitBoard,\r\n  emitWin\r\n}","const { generateName,sumArrays,oddsOf,pickColor } = require(\"../etc/helpers.js\");\r\nconst { Snake } = require(\"../objects/snake.js\");\r\nconst { manager } = require(\"../managers/roomManager.js\");\r\n\r\n\r\nclass Bot extends Snake{\r\n  constructor(uid,room,type){\r\n    super(uid,generateName(),pickColor(), room,\r\n              [Math.floor(Math.random() * (manager.getRoom(room).size*0.75)),Math.floor(Math.random() * (manager.getRoom(room).size*0.75))]\r\n         );\r\n    this.minMistakesPerTickPercent = 0.8;\r\n    this.isBot = true;\r\n    this.bot = true;\r\n    this.type = type;\r\n    //this.pref01 = Math.round(Math.random());\r\n    this.oddsOfMistakePerTick = 1 - ((Math.random() * (1-this.minMistakesPerTickPercent))+this.minMistakesPerTickPercent);\r\n    this.inverseMap = {\r\n      \"up\":\"down\",\r\n      \"down\":\"up\",\r\n      \"left\":\"right\",\r\n      \"right\":\"left\"\r\n    };\r\n    this.shiftInverseMap = {\r\n      \"up\":[\"right\",\"left\"],\r\n      \"down\":[\"right\",\"left\"],\r\n      \"left\":[\"up\",\"down\"],\r\n      \"right\":[\"up\",\"down\"]\r\n    }\r\n  }\r\n  move(){\r\n    this.getMove();\r\n    var head = this.body[0];\r\n    var newBlock = sumArrays(head,this.directionMap[this.direction]);\r\n    if(!this.eating){\r\n      this.body.pop();\r\n    }else{\r\n      this.eating = false;\r\n    }\r\n    this.body.unshift(newBlock);\r\n  }\r\n  getMove(){\r\n    var head = this.body[0];\r\n    var apple = this.getRoom().apple;\r\n    var walls = this.getRoom().walls;\r\n\r\n    var dirToGo = this.direction;\r\n    \r\n    if(head[0] > apple[0]){\r\n      dirToGo = \"left\"\r\n    }else if(head[0] < apple[0]){\r\n      dirToGo = \"right\";\r\n    }else if(head[1] > apple[1]){\r\n      dirToGo = \"down\";\r\n    }else if(head[1] < apple[1]){\r\n      dirToGo = \"up\";\r\n    }\r\n\r\n    if(this.direction == this.inverseMap[dirToGo]){\r\n      this.direction = this.shiftInverseMap[dirToGo][Math.round(Math.random())];\r\n    }else{\r\n      this.direction = dirToGo;\r\n    }\r\n\r\n    this.direction = this.checkPathsAwayFrom(this.direction,0);\r\n    var mistake = oddsOf(this.oddsOfMistakePerTick * 100);\r\n    if(mistake){\r\n      this.direction = Object.keys(this.inverseMap)[Math.floor(Math.random() * Object.keys(this.inverseMap).length)];\r\n\r\n      if(this.direction == this.inverseMap[this.direction]){\r\n        this.direction = this.shiftInverseMap[this.direction][Math.round(Math.random())];\r\n      }\r\n    }\r\n  }\r\n  checkPathsAwayFrom(direction,tries){\r\n    if(tries < 4){\r\n      var head = this.body[0]\r\n      var forward = sumArrays(this.directionMap[direction],head);\r\n      if(this.getRoom().is_block_occupied(forward) == \"wall\" || this.getRoom().is_block_occupied(forward) == \"snake\"){\r\n        return this.checkPathsAwayFrom(this.shiftInverseMap[direction][Math.round(Math.random())],tries+1);\r\n      }else{\r\n        return direction\r\n      }\r\n    }else{\r\n      return direction;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  Bot\r\n}","module.export = { ...require(\"./gameManager.js\") }\r\nmodule.export = { ...require(\"./roomManager.js\") }","const { json2array, guid } = require(\"../etc/helpers.js\")\r\nconst { emitBoard } = require(\"../server/eventListener.js\");\r\nconst { manager } = require(\"./roomManager.js\");\r\nconst { Bot } = require(\"../bots/bots.js\");\r\n\r\n\r\n\r\n\r\nclass GameManager {\r\n  constructor(m, t = 200) {\r\n    this.roomManager = m;\r\n    this.tick = t;\r\n    this.workers = []; // Store the worker instances\r\n  }\r\n  async __init__() {\r\n    if (this.roomManager.ticking) {\r\n      var roomarray = json2array(this.roomManager.rooms);\r\n\r\n      for (var i = 0; i < roomarray.length; i++) {\r\n        var room = roomarray[i];\r\n\r\n        if (room.needsToBeDeleted) {\r\n          manager.deleteRoom(room.uid);\r\n        } else {\r\n          if (room.snakes.length < 3) {\r\n            var bot = new Bot(guid(), room.uid, \"standard\");\r\n            room.addSnake(bot, true);\r\n            manager.addSnake(bot, true);\r\n          }\r\n          room.tick();\r\n          emitBoard(room,this.tick);\r\n        }\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.__init__();\r\n    }, this.tick);\r\n  }\r\n}\r\n\r\nconst server1GM = new GameManager(manager);\r\nserver1GM.__init__();\r\nmodule.exports = {\r\n  gameManager: server1GM,\r\n}","require(\"./server/internals.js\");\r\nrequire(\"./managers/internals.js\")","module.exports = { ...require(\"./app.js\") };\r\nmodule.exports = { ...require(\"./webs.js\")};\r\nmodule.exports = { ...require(\"./events.js\")}"],"names":[],"version":3,"file":"main.js.map"}